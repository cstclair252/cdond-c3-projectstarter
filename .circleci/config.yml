version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: test front end
          command: |
              cd frontend
              npm install
              npm run test
      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: test backend 
          command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend 
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend 
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
  
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --parameter-overrides ID=back${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --parameter-overrides ID=front${CIRCLE_WORKFLOW_ID:0:7}

#  This should get the public IP address of all instances and output to the inventory.txt file und [web] x

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            -  project/.circleci/ansible/inventory.txt 
      # Here's where you will add some code to rollback on failure

#      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:latest
      # Docker image here that supports Ansible
    steps:
      - checkout
      # might have to install a aws cli dependencies??
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:    
          fingerprints: ["70:12:02:20:bc:b0:3d:19:6e:a0:0e:a3:b2:c7:0d:e1"] 
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install Ansible
          command: |
            apt-get update && apt-get install -y ansible
            ansible --version

    
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  x
  
  
  run-migrations:
    docker:
      - image: node:lts-alpine
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
              if 
                grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl https://kvdb.io/NPKrPPPMch8svbr5uhv6dX/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi

      - destroy-environment
  
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install ansible
          command: |
            apt-get update
            apt-get install ansible
      
      - run:
          name: Install Python
          command: |
            apt-get update
            apt-get install python3

      - run: 
          name: Install Node and NPM
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs

      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      
      - run:
          name: bake in backend IP API URL
          command: |
            npm run build
      
      - run: 
          name: copy files to s3 bucket 
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

    # - destroy environment 

  deploy-backend:
    docker:
      - image: python:3.9.16
      # Docker image here that supports Ansible
    steps:
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:    
          fingerprints: ["70:12:02:20:bc:b0:3d:19:6e:a0:0e:a3:b2:c7:0d:e1"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install tar utility
          command: |
            apt-get update
            apt-get install -y tar gzip
      
      - run:
          name: Install Ansible
          command: |
            apt-get update -y
            apt install ansible -y
            which ansible

      - run:
          name: Install npm
          command: |
            apt-get update -y
            apt-get install -y npm
            npm --version


      - run:
          name: Deploy backend
          command: |
              cd backend
              npm i
              npm run build
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
    
    # - destroy-environment

workflows:
  default:
    jobs:
    
#      - deploy-infrastructure
      - configure-infrastructure
#          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
 #         requires: [test-frontend, test-backend, scan-frontend, scan-backend]

