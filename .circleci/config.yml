version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-front${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1

# to be able to revert migrations
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.         
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/NPKrPPPMch8svbr5uhv6dX/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            
            if 
              (( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: test front end
          command: |
              cd frontend
              npm install
              npm run test
      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: test backend 
          command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend 
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend 
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
  
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --parameter-overrides ID=back${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1 \
              --parameter-overrides ID=front${CIRCLE_WORKFLOW_ID:0:7}

#  This should get the public IP address of all instances and output to the inventory.txt file und [web] x

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            -  project/.circleci/ansible/inventory.txt 


      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:latest
    steps:
      - checkout
      # might have to install a aws cli dependencies??
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:    
          fingerprints: ["70:12:02:20:bc:b0:3d:19:6e:a0:0e:a3:b2:c7:0d:e1"] 
      
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install Ansible
          command: |
            apt-get update && apt-get install -y ansible
            ansible --version

    
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      
      - destroy-environment
  
  
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      
      - run: 
          name: npm install
          command: |
            cd ~/project/backend 
            npm install
      
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm run migrations > ~/project/backend/migrations_dump.txt
            cat ~/project/backend/migrations_dump.txt
      
      - run:
          name: Send migration results to kvdb
          command: |
              if 
                grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl --insecure https://kvdb.io/NPKrPPPMch8svbr5uhv6dX/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
                echo "migrations failed"
              fi

      - destroy-environment
      - revert-migrations
  
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl unzip
      
      - run: 
          name: Install cli
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin

      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env


    
      
      - run: 
          name: copy files to s3 bucket 
          command: |
            cd ~/project/frontend/
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-front${CIRCLE_WORKFLOW_ID:0:7} --recursive


      - destroy-environment
      - revert-migrations
  deploy-backend:
    docker:
      - image: python:3.9.16
      # Docker image here that supports Ansible
    steps:
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:    
          fingerprints: ["70:12:02:20:bc:b0:3d:19:6e:a0:0e:a3:b2:c7:0d:e1"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install tar utility
          command: |
            apt-get update
            apt-get install -y tar gzip
      
      - run:
          name: Install Ansible
          command: |
            apt-get update -y
            apt install ansible -y
            which ansible

      - run:
          name: Install npm
          command: |
            apt-get update -y
            apt-get install -y npm
            npm --version  

      - run:
          name: Save all DB var to .env
          command: |
            ls
            pwd
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo NODE_ENV=production >>  ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            cat .env
            ls    


      - run:
          name: Deploy backend
          command: |
              cd backend
              npm i
              npm run build
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
    
      - destroy-environment
      - revert-migrations



  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl unzip
      
      - run: 
          name: Install cli
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin

# export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
#export BACK-IP=$(tail -n +3 cat ~/project/.circleci/ansible/inventory.txt)
            #cat ~/project/.circleci/ansible/inventory.txt
            #echo "inventory text IP: ${BACK-IP}"    
      
      - run:
          name: Backend smoke test.
          command: |
            sleep 30
            
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
            
           
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}/api/status"
            
            if 
              curl -s "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-front${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com/index.html"         
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      
      - run:
          name: Fetch and save the old workflow ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
            cat ~/textfile.txt    
      
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
      
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
            echo $WorkflowID  
      
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      
      - attach_workspace:
          at: ~/
# you could put your own code in here if needed for brining in the textfile. 

      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            export TEXTFILE=$(cat ~/textfile.txt)
            export OldID=${TEXTFILE: -7}
            echo "workflow ID: ${OldWorkflowID}"
            echo "textfile: $TEXTFILE"
            echo "OldID: ${OldID}"
            export OBUCKET=$
            OBUCKET=$(echo "s3://udapeople-front${OldID}")
            echo $OBUCKET
            echo "s3://udapeople-front${OldID}"
      
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldID}" ]]
            then
              echo "-------------------Delete Confirmed-----------------"
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldID}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldID}
            else 
              echo "---------------Cannot Cleanup--------------------"
            fi

workflows:
  default:
    jobs:


      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
 #         requires: [test-frontend, test-backend, scan-frontend, scan-backend]

